% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MTRfuncs.R
\name{get_alluvialplot}
\alias{get_alluvialplot}
\title{Plot alluvial plot of dynamic community membership}
\usage{
get_alluvialplot(
  track,
  allcols = NULL,
  fluxbysource = T,
  fluxsinglecol = T,
  fluxmovecol = "grey",
  fluxsinglecolremain = T,
  fluxremaincol = "grey",
  fluxalpha = 0.4,
  figwidth = 8,
  figheight = 2,
  rlabels = NULL,
  rstart = NULL,
  rstop = NULL,
  rmargins = c(0, 0.2, 1, 1),
  cwidth = 0.2,
  clusterlw = 0.5,
  labelsize = 0,
  reimport = T,
  removefile = T,
  exportfilename = "Rplot.png"
)
}
\arguments{
\item{track}{A MajorTrack object as produced by \code{\link{do_track}}.}

\item{allcols}{A vector of colours, the same length at the number of unique
dynamic communities in the MajorTrack object. Defaults to rainbow
colours.}

\item{fluxbysource}{Boolean. If TRUE, the connecting fluxes between timesteps
will be coloured the same as the dynamic community from which they
originate. Defaults to TRUE.}

\item{fluxsinglecol}{Boolean. If TRUE, the connecting fluxes between
timesteps will be a single colour as defined by \code{fluxmovecol}.
Overrides fluxbysource.}

\item{fluxmovecol}{Single colour of movements between different dynamic
communities in different timesteps. Defaults to "grey".}

\item{fluxsinglecolremain}{Boolean. If TRUE fluxes between the same dynamic
community in different timesteps will be a single colour as defined by
\code{fluxremaincol}. Defaults to TRUE.}

\item{fluxalpha}{Transparency of fluxes, where 1 is opaque and 0 is
invisible. Defaults to 0.4}

\item{figwidth}{Width of figure in inches. Defaults to 8.}

\item{figheight}{height of figure in inches. Defaults to 2.}

\item{rlabels}{Vector of labels that, if supplied, will override the
timestep labels.}

\item{rstart}{Integer specifying timestep at which to start plotting.}

\item{rstop}{Integer specifying timestep at which to stop plotting.}

\item{rmargins}{Vector of numbers between 0 and 1 in the format
\code{c(left,bottom,right,top)}. Specifies a rectangle in which the
alluvial plot (blocks and fluxes) is placed in the overall plotting area.
By default the alluvial plot takes up the entirety of the plotting area,
 except for the bottom where a gap is left for the
 labels: \code{c(0,0.2,1,1)}.}

\item{cwidth}{Number between 0 and 1 defining cluster width. 0 will hide
clusters, 1 will leave no room between clusters. Defaults to 0.2}

\item{clusterlw}{Number between 0 and 1 defining line width of cluster
borders.
Defaults to 0.5. Currently has no effect.}

\item{labelsize}{Number defining size of per cluster labels. Defaults to 0,
hiding labels.}

\item{reimport}{Boolean. If TRUE, the python figure will be imported into R.
Defaults to TRUE.}

\item{removefile}{Boolean. If TRUE, the exported python figure will be
deleted when the function is finished. Defaults to TRUE.}

\item{filename}{String giving the name and path of the exported file.
Defaults to "Rplot.png"}
}
\description{
Plots dynamic communities and the movements between them as an alluvial plot
\url{https://en.wikipedia.org/wiki/Alluvial_diagram}
}
\details{
The R function for the MT alluvial plots is a wrapper for the
    python plotting functions.

    If reimport is TRUE it will run the plotting
    code, export an image then bring it back into R.
    By default the image file will then be removed.

    The code attempts to place the R margins and axis in the same positions
    as those in the python plot. There is a chance this might fail on some
    graphics devices. If succesful the resulting plotting device will have
    an x-axis where each tick is a timestep.

    Combining \code{fluxbysource}, \code{fluxsinglecol} and
    \code{fluxsinglecolremain} will produce different effects.
    \code{fluxsinglecol} being TRUE will colour all fluxes the
    same. If \code{fluxsinglecolremain} is also TRUE, this will result in
    remain fluxes being one colour and all other fluxes (moves, splits,
    merges) being another colour. If \code{fluxsinglecol} is FALSE and
    \code{fluxbysource} is TRUE then fluxes will be coloured by the community
    they originate from.  and all other fluxes (moves, splits,
    merges) being another colour. If \code{fluxsinglecol} is FALSE and
    \code{fluxbysource} is also FALSE then fluxes will be coloured by
    the community they are heading toward. Both these combinations can
    further be combined with \code{fluxsinglecolremain} being TRUE to
    separate remain fluxes and all other fluxes.
}
\examples{
data(allnets)
data(allcoms)
track = do_track(allnets, allcoms, history=1)
get_similarities(track)
}
